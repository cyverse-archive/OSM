Install the iPlant OSM
======================

Download the OSM war from off of hudson and copy it into Tomcat's webapps directory. If you're running the OSM on the same box that is hosting MongoDB, then no additional configuration should be needed.

The OSM is now using Log4J to control log levels. The log4j.properties file lives in the deployed war's WEB-INF/classes/ directory.

If you're not running MongoDB on the same host as the OSM, then you'll need to configure the OSM to hit the correct MongoDB instance. This is done by modifying the osm.properties file, which is located in the deployed war's WEB-INF/classes/ directory. The config file will look like this:

    osm.mongodb.host=127.0.0.1
    osm.mongodb.port=27017
    osm.mongodb.database=osmdb
    osm.callbacks.connect-timeout=60000
    osm.callbacks.read-timeout=60000
    osm.app.max-retries=10
    osm.app.retry-delay=1000

The only thing you should have to modify is the osm.mongodb.host so it's pointing to the correct IP address or hostname.


Verifying the OSM is *working*
==============================

### verify it's alive

We can check that the OSM is alive:

> $> curl http://osm-1.iplantcollaborative.org:14444/osm/jobs/blah

or

> $> curl http://osm-1.iplantcollaborative.org:14444/osm/jobs/foobarbazbang

We can check the log too:

> tail -f /opt/tomcat/logs/osm.log

This just shows the service is responding, the result should be:

     That url doesn't exist.

### creating documents / creating "objects"

> $> curl --data '{"foo":"bar"}' http://osm-1.iplantcollaborative.org:14444/osm/jobs

This will produce a UUID:

    32060E54-F92A-1358-33EC-8E6F22BBBACD

This identifier will be used with subsequent updates.  The above value returned will varied since it's a generated identifier.

We can grab that the freshly created document with a simple HTTP GET:

> $> curl http://osm-1.iplantcollaborative.org:14444/osm/jobs/32060E54-F92A-1358-33EC-8E6F22BBBACD

    {
        "object_persistence_uuid": "32060E54-F92A-1358-33EC-8E6F22BBBACD",
        "state": {
            "foo": "bar"
        },
        "history": [

        ],
        "callbacks": [

        ]
    }

### updating documents / updating "objects"

We can update the document (or, object state) like so:

> $> curl --data '{"foo": "bar", "status": "RUNNING", "whatever": "theheck", "jerry": "wants"}' http://osm-1.iplantcollaborative.org:14444/osm/jobs/32060E54-F92A-1358-33EC-8E6F22BBBACD

    {
        "object_persistence_uuid": "32060E54-F92A-1358-33EC-8E6F22BBBACD",
        "state": {
            "foo": "bar",
            "status": "RUNNING",
            "whatever": "theheck",
            "jerry": "wants"
        },
        "history": [
            {
                "foo": "bar",
                "status": "RUNNING"
            }
        ],
        "callbacks": [

        ]
    }

Keep in mind that this is replacing the document that is stored.

Grab the UUID and check it to see if your changes made it:

> $> curl http://osm-1.iplantcollaborative.org:14444/osm/jobs/32060E54-F92A-1358-33EC-8E6F22BBBACD

The previous state is available in ``"history"``.

When state changes, there are callbacks that will fire an HTTP PORT to the URL defined by the callback's ``callback`` value:
check the callbacks:

> $> curl http://osm-1.iplantcollaborative.org:14444/osm/jobs/32060E54-F92A-1358-33EC-8E6F22BBBACD/callbacks

    {"callbacks":[]}

To test that callbacks are firing, you may wish to create a "[post-bin](http://www.postbin.org/)".  This is a service that will create a some bucket for the OSM to HTTP POST data into and allow you to view it.  Visit [PostBin](http://www.postbin.org/) to create your data bucket.  You can monitor changes with an Atom syndication feed, or by hitting the URL given when you create it.  It will allow you to inspect the content and the headers of the HTTP POSTs.  (github has a short [description](http://help.github.com/testing-webhooks/) of using PostBin)

When a document is updated, so any update, the OSM will do an HTTP POST to a callback of ``"type"`` "on_update" to the URL defined in ``"callback"``.  This means that any modification to the document (even if the same state was posted) will cause a callback to be fired.  If you want more refinement, you'd use "on_change."  When a document has an actual state change, the OSM will do an HTTP POST to a callback of ``"type"`` "on_change" to the URL defined in ``"callback"``.

For clarifications on the callback events, please refer to the OSM [documentation](https://pods.iplantcollaborative.org/wiki/display/coresw/Object+State+Management+System) for more detailed information.

### add callbacks:

> $> curl --data '{"callbacks": [ {"type": "on_change", "callback":"http://www.postbin.org/r51w6z" }, {"type":"on_update","callback":"http://www.google.com/"} ]}' http://osm-1.iplantcollaborative.org:14444/osm/jobs/32060E54-F92A-1358-33EC-8E6F22BBBACD/callbacks

    {"callbacks":[{"type":"on_change","callback":"http:\/\/www.postbin.org\/r51w6z"},{"type":"on_update","callback":"http:\/\/www.google.com"}]}

The results returned will be a list of the current callbacks on the object.  If you want to verify that result then just do the following:

> $> curl http://osm-1.iplantcollaborative.org:14444/osm/jobs/32060E54-F92A-1358-33EC-8E6F22BBBACD/callbacks

    {"callbacks":[{"type":"on_change","callback":"http://www.postbin.org/r51w6z"},{"type":"on_update","callback":"http://www.google.com/"}]}

You can add callbacks for two "event" types (or callback event types): "on_update" and "on_change"

Please refer to the OSM [documentation](https://pods.iplantcollaborative.org/wiki/display/coresw/Object+State+Management+System) for more detailed information.

### deleting callbacks:

> $> curl --data '{"callbacks": [ {"type":"on_update","callback":"http://www.google.com/"} ]}' http://osm-1.iplantcollaborative.org:14444/osm/jobs/32060E54-F92A-1358-33EC-8E6F22BBBACD/callbacks/delete

    {"callbacks":[{"type":"on_change","callback":"http:\/\/www.postbin.org\/r51w6z"}]

The response to the delete command will be the remaining callbacks on the object.

### verify they have been deleted:

> $> curl http://osm-1.iplantcollaborative.org:14444/osm/jobs/32060E54-F92A-1358-33EC-8E6F22BBBACD/callbacks

    {"callbacks":[]}

### querying for what state you're after:

Let's update the OSM with some more "realistic" data:

The input JSON is:

    {
        "uuid": "multistep3-89fb-4d70-0650-0xC0FFEE",
        "name": "job1",
        "user": "ana",
        "workspace_id": "1",
        "dag_id": "323",
        "submission_date": "Sun Dec 19 2010 12:50:38 GMT-0700 (MST)",
        "status": "Submitted",
        "foo": "baz",
        "whatever": "theheck",
        "jerry": "wants"
    }

(Note: You may wish to save this to a file and include it with curl via the response-file interface (putting the @ in front of the filename))

> $> curl --data '{"uuid": "multistep3-89fb-4d70-0650-0xC0FFEE", "name": "job1", "user": "ana", "workspace_id": "1", "dag_id": "323", "submission_date": "Sun Dec 19 2010 12:50:38 GMT-0700 (MST)", "status": "Submitted", "foo": "baz", "whatever": "theheck", "jerry": "wants"}' http://osm-1.iplantcollaborative.org:14444/osm/jobs/32060E54-F92A-1358-33EC-8E6F22BBBACD

This will respond with the new contents and the state management values:

    {
        "object_persistence_uuid": "32060E54-F92A-1358-33EC-8E6F22BBBACD",
        "state": {
            "uuid": "multistep3-89fb-4d70-0650-0xC0FFEE",
            "name": "job1",
            "user": "ana",
            "workspace_id": "1",
            "dag_id": "323",
            "submission_date": "Sun Dec 19 2010 12:50:38 GMT-0700 (MST)",
            "status": "Submitted",
            "foo": "baz",
            "whatever": "theheck",
            "jerry": "wants"
        },
        "history": [
            {
                "foo": "baz",
                "status": "HELD",
                "whatever": "theheck",
                "jerry": "wants"
            }
        ],
        "callbacks": [
            {
                "type": "on_change",
                "callback": "http://www.postbin.org/r51w6z"
            }
        ]
    }

Now let's query for the ``"state.uuid"``.  We put the query in the POST body:

> $> curl --data '{"state.uuid" : "multistep3-89fb-4d70-0650-0xC0FFEE"}' "http://osm-1.iplantcollaborative.org:14444/osm/jobs/query"

    {
        "objects": [
            {
                "object_persistence_uuid": "32060E54-F92A-1358-33EC-8E6F22BBBACD",
                "state": {
                    "uuid": "multistep3-89fb-4d70-0650-0xC0FFEE",
                    "name": "job1",
                    "user": "ana",
                    "workspace_id": "1",
                    "dag_id": "323",
                    "submission_date": "Sun Dec 19 2010 12:50:38 GMT-0700 (MST)",
                    "status": "Submitted",
                    "foo": "baz",
                    "whatever": "theheck",
                    "jerry": "wants"
                },
                "history": [
                    {
                        "foo": "baz",
                        "status": "HELD",
                        "whatever": "theheck",
                        "jerry": "wants"
                    }
                ],
                "callbacks": [
                    {
                        "type": "on_change",
                        "callback": "http://www.postbin.org/r51w6z"
                    }
                ]
            }
        ]
    }

This should help prove that Object State Management (OSM) is functioning as expected.
